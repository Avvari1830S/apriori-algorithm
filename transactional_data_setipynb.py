# -*- coding: utf-8 -*-
"""transactional data setipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gbp-cygogKEWqo8LLIliMd2KvviE7anI
"""

import apriori_algorithm as alg
import pandas as pd
inputFile = 'E:\My Downloads\Transactional_T10I4D100K.csv'
separator = '\t'
minimumSupportCountList = [1000, 1500, 2000, 2500, 3000]
result = pd.DataFrame(columns=['algorithm', 'minSup', 'patterns', 'runtime', 'memory'])
algorithm = 'Apriori'

for minSupCount in minimumSupportCountList:
    obj = alg.Apriori('E:\My Downloads\Transactional_T10I4D100K.csv', minSup=minSupCount, sep=seperator)
    obj.startMine()
    result = result.append({
        'algorithm': algorithm,
        'minSup': minSupCount,
        'patterns': len(obj.getPatterns()),
        'runtime': obj.getRuntime(),
        'memory': obj.getMemoryRSS()
    }, ignore_index=True)
    print(result)
    # Plotting waveform graphs
plt.figure(figsize=(10, 6))

# Number of Patterns
plt.subplot(1, 3, 1)
plt.plot(minimumSupportCountList, result['patterns'], marker='o')
plt.xlabel('Minimum Support Count')
plt.ylabel('Number of Patterns')
plt.title('Number of Patterns')

# Runtime
plt.subplot(1, 3, 2)
plt.plot(minimumSupportCountList, result['runtime'], marker='o')
plt.xlabel('Minimum Support Count')
plt.ylabel('Runtime')
plt.title('Runtime')

# Memory Consumption
plt.subplot(1, 3, 3)
plt.plot(minimumSupportCountList, result['memory'], marker='o')
plt.xlabel('Minimum Support Count')
plt.ylabel('Memory Consumption')
plt.title('Memory Consumption')

plt.tight_layout()
plt.show()
from PAMI.extras.graph import generateLatexFileFromDataFrame as gdf
gdf.generateLatexCode(result)